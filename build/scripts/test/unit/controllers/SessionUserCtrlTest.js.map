{"version":3,"sources":["test/unit/controllers/SessionUserCtrlTest.js"],"names":[],"mappings":"AAAA,SAAS,uBAAuB,YAAY;IACxC,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,WAAW,QAAQ,KAAK,OAAO;IAC/B,WAAW,YAAY;QACnB,QAAQ,KAAK,OAAO,UAAU,eAAe,gBAAgB,gBAAgB,mBAAmB;YAC5F,eAAe;YACf,cAAc;YACd,eAAe;YACf,cAAc;;;IAGtB,UAAU,YAAY;QAClB,aAAa;QACb,aAAa;;IAEjB,GAAG,+BAA+B,YAAY;QAC1C,OAAO,aAAa;;IAExB,SAAS,sBAAsB,YAAY;QACvC,IAAI,OAAO;QACX,IAAI;QACJ,IAAI,WAAW;QACf,IAAI;QACJ,UAAU,IAAI,IAAI,OAAO,QAAQ,GAAG,KAAK,IAAI,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,KAAK;QAClF,SAAS,KAAK;QACd,UAAU,IAAI,IAAI,OAAO,QAAQ,GAAG,KAAK,IAAI,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,KAAK;QAClF,SAAS,KAAK;QACd,UAAU,IAAI,IAAI,OAAO,QAAQ,GAAG,KAAK,IAAI,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,KAAK;QAClF,SAAS,KAAK;QACd,UAAU,IAAI,IAAI,OAAO,QAAQ,GAAG,eAAe,cAAc,GAAG;QACpE,WAAW,YAAY;YACnB,QAAQ;YACR,aAAa,YAAY;YACzB,aAAa,SAAS;YACtB,aAAa,YAAY,mBAAmB,EAAE,QAAQ,OAAO,mBAAmB,aAAa,cAAc;YAC3G,aAAa,UAAU,wFAAwF,QAAQ;;QAE3H,GAAG,gCAAgC,YAAY;YAC3C,aAAa;YACb,OAAO,WAAW,SAAS;;QAE/B,GAAG,gDAAgD,YAAY;YAC3D,aAAa;YACb,OAAO,GAAG,KAAK,WAAW,QAAQ,SAAS;;QAE/C,GAAG,+CAA+C,YAAY;YAC1D,aAAa;YACb,IAAI,UAAU,EAAE,MAAM,WAAW,QAAQ,UAAU,EAAE,WAAW;YAChE,OAAO,GAAG,KAAK,QAAQ;;QAE3B,GAAG,0CAA0C,YAAY;YACrD,aAAa;YACb,IAAI,UAAU,EAAE,MAAM,EAAE,MAAM,WAAW,QAAQ,UAAU,EAAE,WAAW;YACxE,OAAO,KAAK,KAAK,QAAQ;;;;AAIrC","file":"test/unit/controllers/SessionUserCtrlTest.js","sourcesContent":["describe(\"SessionUserCtrlTest\", function () {\n    var $httpBackend;\n    var $controller;\n    var dataService;\n    var $routeParams;\n    beforeEach(angular.mock.module('lapTimeManagement'));\n    beforeEach(function () {\n        angular.mock.inject(function (_$controller_, _$httpBackend_, _$routeParams_, dataAccessService) {\n            $httpBackend = _$httpBackend_;\n            $controller = _$controller_;\n            $routeParams = _$routeParams_;\n            dataService = dataAccessService;\n        });\n    });\n    afterEach(function () {\n        $httpBackend.verifyNoOutstandingExpectation();\n        $httpBackend.verifyNoOutstandingRequest();\n    });\n    it(\"should initialize correctly\", function () {\n        expect(dataService).toBeDefined();\n    });\n    describe(\"Controller session\", function () {\n        var scope, controller;\n        var session;\n        var lapTimes = [];\n        var lapTime;\n        lapTime = new app.domain.LapTime(1, 333, new Date(2015, 12, 22), 111, 'bob', 222, false);\n        lapTimes.push(lapTime);\n        lapTime = new app.domain.LapTime(1, 444, new Date(2015, 12, 22), 222, 'bob', 111, false);\n        lapTimes.push(lapTime);\n        lapTime = new app.domain.LapTime(1, 666, new Date(2015, 12, 22), 222, 'bob', 222, false);\n        lapTimes.push(lapTime);\n        session = new app.domain.Session(1, \"Big Red Car\", \"Long Track\", 2, lapTimes);\n        beforeEach(function () {\n            scope = {};\n            $routeParams.sessionId = 1;\n            $routeParams.userId = 2;\n            controller = $controller(\"SessionUserCtrl\", { $scope: scope, dataAccessService: dataService, $routeParams: $routeParams });\n            $httpBackend.expectGET(\"https://t1nj5fds0c.execute-api.ap-northeast-1.amazonaws.com/develop/session/1/user/2\").respond(session);\n        });\n        it('session has been initialized', function () {\n            $httpBackend.flush();\n            expect(controller.session).toBeDefined();\n        });\n        it('should contain the correct number of session', function () {\n            $httpBackend.flush();\n            expect(3).toBe(controller.session.laptimes.length);\n        });\n        it('should contain one laptime maked as fastest', function () {\n            $httpBackend.flush();\n            var fastest = _.where(controller.session.laptimes, { 'fastest': true });\n            expect(1).toBe(fastest.length);\n        });\n        it('should have the fastest laptime of 222', function () {\n            $httpBackend.flush();\n            var fastest = _.first(_.where(controller.session.laptimes, { 'fastest': true }));\n            expect(333).toBe(fastest.lap_time);\n        });\n    });\n});\n"],"sourceRoot":"/source/"}